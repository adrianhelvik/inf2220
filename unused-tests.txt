
    boolean performWildcardSearchWithNoMatch() {
        String needle;
        String haystack;

        needle = "hell_ world";
        haystack = "Hello there... How'd'ya do?";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        System.out.println();
        System.out.println();
        System.out.println();
        System.out.println();

        for (int i = 0; i < res.length; i++) {
            System.out.println("     " + res[i]);
        }

        return res.length == 0;
    }

    boolean performSearchWithNoMatch() {
        String needle;
        String haystack;

        needle = "hello world";
        haystack = "Hello there... How'd'ya do?";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        return res.length == 0;
    }
    
    boolean performSearchWhereNeedleIsSubstringOfHaystack() {
        String needle;
        String haystack;

        needle = "sub";
        haystack = "aaaaaaaaaaaaaasubaaaaaaaaaaa";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        return res[0].value().equals("sub");
    }

    boolean performSearchWhereNeedleAndHaystackAreTheSame() {
        String needle;
        String haystack;

        needle = "abcd";
        haystack = "abcd";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        return res.length > 0 && res[0].value().equals("abcd");
    }
    
    boolean performSearchWithOneLetterInNeedleAndHaystackMatching() {
        String needle;
        String haystack;

        needle = "a";
        haystack = "a";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        return res.length == 1;
    }
    
    boolean performSimpleSearchWithEmptyHaystackAndNoMatch() {
        String needle;
        String haystack;

        needle = "a";
        haystack = "";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        return res.length == 0;
    }

    boolean performSearchWithWildcard() {
        String needle;
        String haystack;

        needle = "hell_ world";
        haystack = "Hello there... hella world. How'd'ya do?";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        System.out.println( "Result: " + Arrays.asList( res ) );

        return res.length > 0;
    }

    boolean performAnotherSearchWithSmallWildcard() {

        //
        // BUG: If last letter needle is wildcard, wildcard is ignored
        //

        String needle;
        String haystack;

        needle = "hell_";
        haystack = " hella ";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        System.out.println( "Result: " + Arrays.asList( res ) );

        return res.length > 0 && res[0].value().equals("hella");
    }
    
    boolean performSearchWithSmallWildcard() {
        String needle;
        String haystack;

        needle = "h_";
        haystack = "hi";

        Substring[] res = new StringSearch( needle, haystack ).getResult();

        System.out.println( "Result: " + Arrays.asList( res ) );

        return res.length > 0 && res[0].value().equals( "hi" );
    }
    
    boolean needleAsWildcardAgainstOneOtherLetter() {
        StringSearch search = new StringSearch("_", "a");
        Substring[] res = search.getResult();

        return res.length > 0 && res[0].value().equals("a");
    }
    
    boolean performMoreAdvancedSearch() {
        StringSearch search = new StringSearch( "LUCKYDUCKCLUCK", "MUCKYDUXCLUCKDUCKYCLUCKYDUCKMUCKLUCKMCLUCKYDUCKCLUCKDUXCLUCKX" );
        Substring[] searchResults = search.getResult();
        int length = searchResults.length;

        return length > 0;
    }
    
    boolean performSimpleSearch() {
        Substring[] results = new StringSearch("e", "Hello").getResult();
        return results.length > 0;
    }
    
    boolean needleIsStartOfHaystack() {
        Substring[] results = new StringSearch("Hel", "Hello").getResult();
        return results[0].value().equals("Hel");
    }
    
    boolean needleAndHaystackAreEqual() {
        return new StringSearch("hello", "hello").getResult()[0].value().equals("hello");
    }
    
    boolean oneLetterNeedleAndHaystackAreEqual() {
        return new StringSearch("a", "a").getResult()[0].value().equals("a");
    }

